import{_ as a,c as i,a0 as n,o as l}from"./chunks/framework.CSihnngI.js";const c=JSON.parse('{"title":"第一章 权衡的艺术","description":"","frontmatter":{},"headers":[],"relativePath":"bookShare/vuejsDesign/chapter1.md","filePath":"bookShare/vuejsDesign/chapter1.md","lastUpdated":1729183001000}'),t={name:"bookShare/vuejsDesign/chapter1.md"};function e(p,s,h,r,k,d){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="第一章-权衡的艺术" tabindex="-1">第一章 权衡的艺术 <a class="header-anchor" href="#第一章-权衡的艺术" aria-label="Permalink to &quot;第一章 权衡的艺术&quot;">​</a></h1><blockquote><p>框架设计里到都体现了权衡的艺术</p></blockquote><h2 id="_1-1-声明式-vs-命令式" tabindex="-1">1.1 声明式 vs 命令式 <a class="header-anchor" href="#_1-1-声明式-vs-命令式" aria-label="Permalink to &quot;1.1 声明式 vs 命令式&quot;">​</a></h2><ul><li>命令式： <strong>更加关注过程</strong>。自然语言能够与代码产生一一对应的关系，代码本身描述的是”做事的过程“。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 获取id为app的元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 它的内容为hello world</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 为其绑定单击事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 点击时弹出ok的提示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取id为app的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 它的内容为hello world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定单击事件, 点击时弹出ok的提示</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>声明式： <strong>更加关注结果</strong>。至于实现的过程，由框架实现。</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 获取id为app的元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 它的内容为hello world</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 为其绑定单击事件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 点击时弹出ok的提示 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alert(&#39;ok&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">结论</p><ul><li><p>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</p></li><li><p>理论上命令式的代码可以做到极致的性能优化，<strong>声明式代码的性能不优于命令式代码的性能</strong></p></li></ul></div><h2 id="_1-2-虚拟-dom-的意义" tabindex="-1">1.2 虚拟 DOM 的意义 <a class="header-anchor" href="#_1-2-虚拟-dom-的意义" aria-label="Permalink to &quot;1.2 虚拟 DOM 的意义&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">理论上</p><p><code>虚拟DOM</code> 的更新技术性能理论上不可能比原生 JavaScript 操作 DOM 更高</p></div><p>在实际开发过程中，很难写出绝对优化的命令式代码，尤其是当项目体量变大时，命令式代码的性能问题就显得尤为突出。</p><p>所以如何能让开发者更加容易开发出易维护、易扩展的应用又能保证应用程序的<strong>性能下限</strong>，这就是 <code>虚拟DOM</code> 需要处理的问题</p><h3 id="性能消耗对比" tabindex="-1">性能消耗对比 <a class="header-anchor" href="#性能消耗对比" aria-label="Permalink to &quot;性能消耗对比&quot;">​</a></h3><h4 id="innerhtml-vs-virtual-dom-在创建页面时的性能对比" tabindex="-1">innerHTML vs Virtual DOM 在创建页面时的性能对比 <a class="header-anchor" href="#innerhtml-vs-virtual-dom-在创建页面时的性能对比" aria-label="Permalink to &quot;innerHTML vs Virtual DOM 在创建页面时的性能对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>列名 1</th><th>innerHTML</th><th>Virtual DOM</th></tr></thead><tbody><tr><td>语法</td><td>const html = <code>&lt;div&gt;&lt;span&gt;...&lt;/span&gt;&lt;/div&gt;</code> <br> div.innerHTML = html</td><td>数据 3</td></tr><tr><td>公式</td><td></td><td>数据 6</td></tr></tbody></table><h4 id="innerhtml-vs-virtual-dom-在更新页面时的性能对比" tabindex="-1">innerHTML vs Virtual DOM 在更新页面时的性能对比 <a class="header-anchor" href="#innerhtml-vs-virtual-dom-在更新页面时的性能对比" aria-label="Permalink to &quot;innerHTML vs Virtual DOM 在更新页面时的性能对比&quot;">​</a></h4><h2 id="_1-3-运行时与编译时" tabindex="-1">1.3 运行时与编译时 <a class="header-anchor" href="#_1-3-运行时与编译时" aria-label="Permalink to &quot;1.3 运行时与编译时&quot;">​</a></h2>`,17)]))}const u=a(t,[["render",e]]);export{c as __pageData,u as default};
