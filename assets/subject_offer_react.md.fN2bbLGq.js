import{_ as a,c as i,a0 as n,o as l}from"./chunks/framework.CSihnngI.js";const E=JSON.parse('{"title":"React 系列","description":"","frontmatter":{},"headers":[],"relativePath":"subject/offer/react.md","filePath":"subject/offer/react.md","lastUpdated":1750644026000}'),p={name:"subject/offer/react.md"};function e(t,s,h,r,k,d){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="react-系列" tabindex="-1">React 系列 <a class="header-anchor" href="#react-系列" aria-label="Permalink to &quot;React 系列&quot;">​</a></h1><h2 id="说说对-react-的理解-有哪些特性" tabindex="-1">说说对 React 的理解？有哪些特性？ <a class="header-anchor" href="#说说对-react-的理解-有哪些特性" aria-label="Permalink to &quot;说说对 React 的理解？有哪些特性？&quot;">​</a></h2><h3 id="是什么" tabindex="-1">是什么？ <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么？&quot;">​</a></h3><ul><li><p>React 是用于构建用户界面的 javascript 库, 只提供了 UI 层面的解决方法。</p></li><li><p>遵循了组件化的开发模式、声明式编程范式和函数式编程概念，使前端应用程序的开发更加高效。</p></li><li><p>使用虚拟 DOM 来有效地操作真实 DOM，遵循从高阶组件到低阶组件的单项数据流</p></li><li><p>组件化开发模式，将界面划分成每个独立的小块，每个小块就是一个组件，可以相互组合、嵌套，构成整体页面</p></li><li><p>使用 <code>jsx</code> 语法，被 babel 编译成合法的 JS 语句调用</p></li></ul><h3 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h3><ul><li>声明式编程</li></ul><blockquote><p><a href="/bookShare/vuejsDesign/chapter1.html#_1-1-声明式-vs-命令式">传送门：声明式编程 VS 命令式编程</a></p></blockquote><p>** 声明式编程 ** 是一种编程范式，它更加关注结果，而不是如何做。</p><ul><li>Component</li></ul><p>在 react 中，一切皆组件。通常都会将应用程序的整个页面逻辑分解为晓得单个部分，即将其称之为组件。</p><p>组件既可以时一个函数也可以是一个类，接收数据传输，处理它并返回在 UI 中呈现的 React 元素。</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数式组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Jumbotron</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ backgroundColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;TODO App&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Jumbotron</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类组件（有状态组件）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dashboard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dashboard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ToDoForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ToDolist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">开发组件的原则：</p><ul><li>专一性：符合单一职责设计原则，一个组件仅为一个任务或功能负责</li><li>独立性：组件与组件之前相互独立，最好不直接进行通信</li><li>拆分性：与其他组件解耦，不受其他组件的副作用影响能正常运行</li><li>重组性：可以与其他组件进行组合和搭配</li><li>替换性：提供同意的接口和使用方式，只要两个组件的接口一致，就可以轻松进行替换</li></ul></div><ul><li><p>JSX 语法</p></li><li><p>单项数据流</p></li><li><p>虚拟 DOM</p></li></ul><h3 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h3><ul><li><p>高效灵活</p></li><li><p>声明式设计，使用更加高效</p></li><li><p>组件是开发，提高代码复用率</p></li><li><p>单向响应的数据流比双向绑定的更安全，速度更快</p></li></ul><h2 id="说说-rel-dom-和-virtual-dom-的区别及优缺点" tabindex="-1">说说 <code>Rel DOM</code> 和 <code>Virtual DOM</code> 的区别及优缺点 <a class="header-anchor" href="#说说-rel-dom-和-virtual-dom-的区别及优缺点" aria-label="Permalink to &quot;说说 \`Rel DOM\` 和 \`Virtual DOM\` 的区别及优缺点&quot;">​</a></h2><h2 id="react-中组件如何通信" tabindex="-1">React 中组件如何通信 <a class="header-anchor" href="#react-中组件如何通信" aria-label="Permalink to &quot;React 中组件如何通信&quot;">​</a></h2><p>大致可分为 5 种：</p><ul><li><code>父 向 子</code> 通信:</li></ul><p>react 的数据流向是单向的，所以最常见，通过 props 属性接收父组件传递过来的参数</p><ul><li><code>子 向 父</code> 通信:</li></ul><p>通过父组件向子组件传递一个函数，然后通过该函数额回调拿到子组件传过来的值</p><ul><li><code>兄弟组件</code> 通信：</li></ul><p>通过父组件作为中间层来实现数据的互通</p><ul><li><code>父向后代组件</code> 通信：</li></ul><p>使用 <code>Context API</code>实现。</p><ul><li><code>非关系组件</code> 通信：</li></ul><p>使用全局状态管理库实现。如 <code>redux</code>、<code>mobx</code>、 <code>Zustand</code></p>`,29)]))}const o=a(p,[["render",e]]);export{E as __pageData,o as default};
