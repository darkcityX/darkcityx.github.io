import{_ as i,c as a,a0 as n,o as e}from"./chunks/framework.CSihnngI.js";const o=JSON.parse('{"title":"软件包封装：多种JS模块标准的软件包","description":"","frontmatter":{},"headers":[],"relativePath":"subject/Engineering/publicPackage.md","filePath":"subject/Engineering/publicPackage.md","lastUpdated":1750835701000}'),l={name:"subject/Engineering/publicPackage.md"};function p(t,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="软件包封装-多种js模块标准的软件包" tabindex="-1">软件包封装：多种JS模块标准的软件包 <a class="header-anchor" href="#软件包封装-多种js模块标准的软件包" aria-label="Permalink to &quot;软件包封装：多种JS模块标准的软件包&quot;">​</a></h1><p>一款成熟的类库都会提供多种模块的封装形式，如常用的Vue，就提供了cjs、esm、umd等多种封装模式，并且还会提供对应的压缩版本、方便在开发、生产环境下使用。</p><h2 id="工程化场景下需要考虑支持哪些模块的规范" tabindex="-1">工程化场景下需要考虑支持哪些模块的规范 <a class="header-anchor" href="#工程化场景下需要考虑支持哪些模块的规范" aria-label="Permalink to &quot;工程化场景下需要考虑支持哪些模块的规范&quot;">​</a></h2><p>目前常用的模块规范有：</p><ul><li><code>IFFE</code> : 使用立即执行函数实现模块化。例： (function(){})()</li><li><code>CJS</code> : 基于 CommonJs 标准的模块化。</li><li><code>AMD</code> : 使用 Require 编写。</li><li><code>CMD</code> : 使用 SeaJs 编写。</li><li><code>ESM</code> : ES标准的模块化方案(ES6标准提出)。</li><li><code>UMD</code> : 兼容 CJS、AMD、IFFEG 规范。</li></ul><p>其中最常用的有三类：ESM、CJS、IFFE 。ESM标准目前是前端开发的标配，无论是选用webpack或是vite,都会采用这种模块规范。其次是CJS，不可否认，有大量的存量代码还在使用CJS规范，完全没有必要因为引入一个库去更改编译规则。最后就是IFFE这种类型，非常适合用于逻辑简单，无须搭建工程化环境的前端应用。</p><h2 id="需要考虑代码的压缩和混淆问题" tabindex="-1">需要考虑代码的压缩和混淆问题 <a class="header-anchor" href="#需要考虑代码的压缩和混淆问题" aria-label="Permalink to &quot;需要考虑代码的压缩和混淆问题&quot;">​</a></h2><ul><li>代码压缩是指去除代码中的空格、制表符、换行符等内容，将代码压缩至几行甚至是一行，这样可以提高网站的加载速度。</li><li>混淆是指将代码转换成一种功能上等价，但是难以阅读和理解的形式。混淆的主要目的是增加反向工程的难度，同时也可以相对减少代码的体积，比如将变量名缩短等。</li></ul><h2 id="需要考虑-sourcemap-配置" tabindex="-1">需要考虑 SourceMap 配置 <a class="header-anchor" href="#需要考虑-sourcemap-配置" aria-label="Permalink to &quot;需要考虑 SourceMap 配置&quot;">​</a></h2><p><code>SourceMap</code> 是一个信息文件，里面存储了代码打包转换后的位置信息，实质上是一个json描述文件，维护了打包前后的代码映射关系。通常输出的模块不会提供 <code>SourceMap</code> , 因为通过 <code>Sourcemap</code> 很容易还原原始代码。但是如果你想在浏览器中断点调试代码，或者希望在异常监控工具中定位出错位置， <code>SourceMap</code> 就非常有必要。所以需要正确掌握 <code>SourceMap</code> 的生成方式。</p><h2 id="基于vite的打包方案" tabindex="-1">基于vite的打包方案 <a class="header-anchor" href="#基于vite的打包方案" aria-label="Permalink to &quot;基于vite的打包方案&quot;">​</a></h2><h3 id="rollupoption-配置" tabindex="-1">rollupOption 配置 <a class="header-anchor" href="#rollupoption-配置" aria-label="Permalink to &quot;rollupOption 配置&quot;">​</a></h3><p>vite.config.ts</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rollupOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  external: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globals: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      vue: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于 <code>Vite</code> 的构建是通过 <code>rollup</code> 完成的，所以 <code>rollup</code> 中的一些配置是通过这个属性传递给 <code>rollup</code>。 其中需要配置的两个解释如下：</p><ul><li><code>external</code> 作用是将某个模块保留在 <code>bundle</code> 之外， 比如在数组中添加了 <code>vue</code> , 就是为了不让 <code>vue</code> 打包到组件库中</li><li><code>output</code> 这个配置用于 <code>UMD/IFFE</code> 包中，意思是全局中的某个模块在组件库中叫什么名字。比如：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jquery&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 意味着jquery模块的id等同于 $ 变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyBundle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(window.jquery);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="打包配置" tabindex="-1">打包配置 <a class="header-anchor" href="#打包配置" aria-label="Permalink to &quot;打包配置&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minify: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;terser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// boolean | &#39;terser&#39; | &#39;esbuild&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourcemap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出单独 source文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    brotliSize: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成压缩大小报告</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cssCodeSplit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lib: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/entry.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SmartyUI&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;smarty-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      formats: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;umd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iife&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出模块类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><code>minify</code> 是混淆的意思。这里有两个混淆工具 <code>terser</code> 和 <code>esbuild</code> 。</li><li><code>sourcemap</code> 是否生成 <code>SourceMap</code> 源文件</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terser</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>lib.name</code> 生成包的名字，在iife/umd 包，同一页上的其它脚本可以访问它</li><li><code>lib.fileName</code> 文件名，其实只是一个输出文件名的前缀，默认情况下会和模块类型配合组成最终的文件名。</li><li><code>lib.formats</code> [&quot;esm&quot;, &quot;umd&quot;, &quot;iife&quot;] 打包输出的模块类型文件</li></ul>`,22)]))}const E=i(l,[["render",p]]);export{o as __pageData,E as default};
