import{_ as e}from"./chunks/24model.B0JYmzql.js";import{_ as t,c as i,a0 as o,o as r}from"./chunks/framework.CSihnngI.js";const b=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"article/designPattern/0_about.md","filePath":"article/designPattern/0_about.md","lastUpdated":1711959924000}'),l={name:"article/designPattern/0_about.md"};function n(p,a,s,c,d,h){return r(),i("div",null,a[0]||(a[0]=[o('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><blockquote><p>基础理论知识是一个人的基线，理论越强基线越高。再为自己定一个目标和向上攀附的阶梯，那么达到目标就是时间问题，而很多野路子工程师搞了半辈子也未达到优秀工程师的基线，很多他们绞尽脑汁得出的高深学问，不过是正规工程师看起来很自然的东西。—— 吴军</p></blockquote><p><b>前端工程师，首先是软件工程师</b></p><p>过去，人们对软件工程的理解比较狭隘，认为前端就是页面，和软件是两回事儿。随着前端应用复杂度的日新月异，如今的前端应用也妥妥地成为了软件思想的一种载体，而前端工程师，也被要求在掌握多重专业技能之余，具备最基本的软件理论知识。</p><h3 id="如何理解驾驭技术的能力" tabindex="-1">如何理解驾驭技术的能力 <a class="header-anchor" href="#如何理解驾驭技术的能力" aria-label="Permalink to &quot;如何理解驾驭技术的能力&quot;">​</a></h3><ul><li>能用健壮的代码去解决具体的问题；</li><li>能用抽象的思维去应对复杂的系统；</li><li>能用工程化的思想去规划更大规模的业务</li></ul><p>在软件工程中， <code>能用健壮的代码去解决具体的问题</code> 所对标的知识体系就是 <code>设计模式</code>。</p><h3 id="如何学习设计模式" tabindex="-1">如何学习设计模式 <a class="header-anchor" href="#如何学习设计模式" aria-label="Permalink to &quot;如何学习设计模式&quot;">​</a></h3><p>待补图</p><h2 id="设计模式之道" tabindex="-1">设计模式之道 <a class="header-anchor" href="#设计模式之道" aria-label="Permalink to &quot;设计模式之道&quot;">​</a></h2><p>设计模式是“拿来主义”在软件领域的贯彻实践。用做数学题来打比方，可能大家会更能体会这种概念 —— 我们解题目的时候，往往会用到很多公式/现成的解题方法。比如已知直角三角形两边长，求另一边，我们会直接用勾股定理</p><h3 id="solid设计原则" tabindex="-1">SOLID设计原则 <a class="header-anchor" href="#solid设计原则" aria-label="Permalink to &quot;SOLID设计原则&quot;">​</a></h3><blockquote><p>&quot;SOLID&quot; 是由罗伯特·C·马丁在 21 世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。</p></blockquote><p>设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：</p><ul><li>单一功能原则 (Single Responsibility Principle)</li><li>开放封闭原则 (Opened Closed Principle)</li><li>里式替换原则 (Liskov Substitution Principle)</li><li>接口隔离原则 (Interface Segregation Principle)</li><li>依赖反转原则 (Dependency Inversion Principle)</li></ul><p>在 JavaScript 设计模式中，主要用到的设计模式基本都围绕“单一功能”和“开放封闭”这两个原则来展开。</p><h2 id="设计模式的核心思想——封装变化" tabindex="-1">设计模式的核心思想——封装变化 <a class="header-anchor" href="#设计模式的核心思想——封装变化" aria-label="Permalink to &quot;设计模式的核心思想——封装变化&quot;">​</a></h2><p>设计模式出现的背景，是软件设计的复杂度日益飙升。软件设计越来越复杂的“罪魁祸首”，就是 <strong>变化</strong>。</p><p>在实际开发中，不发生变化的代码可以说是不存在的。我们能做的只有将这个变化造成的影响最小化 <strong>—— 将变与不变分离，确保变化的部分灵活、不变的部分稳定</strong>。</p><p>这个过程，就叫“封装变化”；这样的代码，就是我们所谓的“健壮”的代码，它可以经得起变化的考验。而设计模式出现的意义，就是帮我们写出这样的代码。</p><h2 id="设计模式的-术" tabindex="-1">设计模式的 “术” <a class="header-anchor" href="#设计模式的-术" aria-label="Permalink to &quot;设计模式的 “术”&quot;">​</a></h2><p>所谓“术”，其实就是指二十年前 GOF 提出的最经典的23种设计模式。二十年前，四位程序员前辈（Erich Gamma, Richard Helm, Ralph Johnson &amp; John Vlissides）通过编写《设计模式：可复用面向对象软件的基础》这本书，阐述了设计模式领域的开创性成果。在这本书中，将23种设计模式按照“创建型”、“行为型”和“结构型”进行划分：</p><p><img src="'+e+'" alt="软件的24种设计模式"></p><p>设计模式迁移到 JavaScript，不仅仅是从一类语言到另一类语言这么简单。强类型语言不仅和 JavaScript 之间存在着基本语法的差异，还存在着应用场景的差异。在后续的学习过程种，场景是基础，代码是辅助，逻辑是主角。</p>',25)]))}const m=t(l,[["render",n]]);export{b as __pageData,m as default};
