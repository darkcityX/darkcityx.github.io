import{_ as i,c as a,a0 as n,o as l}from"./chunks/framework.CSihnngI.js";const c=JSON.parse('{"title":"Vue 面试题汇总","description":"","frontmatter":{},"headers":[],"relativePath":"subject/offer/vue.md","filePath":"subject/offer/vue.md","lastUpdated":1750644026000}'),e={name:"subject/offer/vue.md"};function p(t,s,h,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="vue-面试题汇总" tabindex="-1">Vue 面试题汇总 <a class="header-anchor" href="#vue-面试题汇总" aria-label="Permalink to &quot;Vue 面试题汇总&quot;">​</a></h1><h2 id="vue-中的-v-for-和-vi-if-哪个优先级高-并说明造成的影响。" tabindex="-1">Vue 中的 v-for 和 vi-if 哪个优先级高？并说明造成的影响。 <a class="header-anchor" href="#vue-中的-v-for-和-vi-if-哪个优先级高-并说明造成的影响。" aria-label="Permalink to &quot;Vue 中的 v-for 和 vi-if 哪个优先级高？并说明造成的影响。&quot;">​</a></h2><ul><li>vue2 中，v-for 优先级高于 v-if；</li><li>vue3 中，v-if 优先级高于 v-for。</li></ul><p>后果：开发时，增加了心智负担，需要在 v-if 或 v-for 嵌套一层(虽然 vue2 风格指南中也强烈不推荐同时使用)</p><h2 id="vue2-的生命周期" tabindex="-1">vue2 的生命周期 <a class="header-anchor" href="#vue2-的生命周期" aria-label="Permalink to &quot;vue2 的生命周期&quot;">​</a></h2><ul><li><p><code>beforeCreate</code>: 是 new Vue() 之后触发的第一个钩子，在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问。</p></li><li><p><code>created</code>：在实例创建完成后发生，当前阶段已经完成数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 updated 生命周期函数。可以做一些初始数据的获取，在当前阶段无法与 DOM 进行交互，如果非要想，可以通过 vm.$nextTick()来获取 DOM。</p></li><li><p><code>beforeMount</code>: 发生在挂载之前，在这之前 template 模版已导入函数编译。当前阶段虚拟 DOM 已经创建完成，即将开始渲染。在此也可以对数据进行修改，不会触发 updated 生命周期函数。</p></li><li><p><code>mounted</code>: 在挂载完成后发生，在当前阶段，真实的 DOM 挂载完成完毕，数据完成双向绑定，可以访问到 DOM 节点，使用$ref 属性对 DOM 进行操作</p></li><li><p><code>beforeUpdate</code>: 发生在更新之前，也就是响应式数据发生更新，虚拟 DOM 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p></li><li><p><code>updated</code>：发生在更新完成之后，当前阶段组件 DOM 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新</p></li><li><p><code>beforeDestroy</code>：发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除定时器等。</p></li><li><p><code>destroyed</code>：发生在实例销毁之后，这个时候只剩下 dom 空壳，组件已经被拆解，数据绑定被卸除，监听被移除，子实例也统统被销毁。</p></li></ul><h2 id="vue2-的响应式原理" tabindex="-1">Vue2 的响应式原理？ <a class="header-anchor" href="#vue2-的响应式原理" aria-label="Permalink to &quot;Vue2 的响应式原理？&quot;">​</a></h2><p>Vue 的响应系统通过 <code>数据劫持</code> 、<code>依赖收集</code> 、 <code>观察者模式</code>等机制，实现了数据变化，视图自动更新的功能。</p><ul><li>数据劫持： 通过 <code>Object.defineProperty()</code> 来劫持对象属性的 <code>getter</code> 和 <code>setter</code>。当数据被访问或者修改时，可以捕获这些操作从而实现响应式。</li><li>依赖收集：当组件渲染时，Vue 会触发数据的 <code>getter</code>， 从而收集依赖于该数据的组件， vue 使用一个称为 <code>Dep</code> 的类来管理这些依赖。</li><li>观察者模式： Vue 通过实现观察者模式，实现了当数据变化时， <code>Watcher</code> 重新触发组件的渲染，其中 <code>Watcher</code> 是观察者，负责订阅和接受数据变化的通知。每一个组件实例都有一个 <code>watcher</code> 实例。</li><li>变化侦听： 当数据的 <code>setter</code> 被触发时，Vue 会通知所有依赖于该数据的 <code>Watcher</code>,从而触发视图的更新。</li><li>虚拟 DOM： Vue 使用虚拟 DOM 来高效的更新视图，数据变化时，Vue 会重新渲染虚拟 DOM，通过差异化算法计算出最小的变更，然后更新真实的 DOM。</li><li>异步队列：为了优化性能，Vue 将数据变化的更新操作放入下一个队列中，并在下一个事件循环中批量执行。</li></ul><h2 id="vue2-响应式原理细节-代码对应" tabindex="-1">Vue2 响应式原理细节（代码对应） <a class="header-anchor" href="#vue2-响应式原理细节-代码对应" aria-label="Permalink to &quot;Vue2 响应式原理细节（代码对应）&quot;">​</a></h2><ul><li><ol><li>vue2 响应系统是如何处理 Object.defineProperty 只能监听对象第一层的？</li></ol></li></ul><p>答：通过递归遍历的方式，当对象被设置为响应式时，Vue 会递归遍历对象的所有属性，并使 <code>Object.defineProperty</code> 为每个属性设置 getter 和 setter。这也意味着即使是嵌套对象的属性也会被转为响应式。</p><p>代码待补充：</p><h2 id="vue3-的响应式原理" tabindex="-1">Vue3 的响应式原理？ <a class="header-anchor" href="#vue3-的响应式原理" aria-label="Permalink to &quot;Vue3 的响应式原理？&quot;">​</a></h2><p>Vue3 的响应式通过使用 JS 的<code>Proxy对象</code>和 <code>新的响应式 API</code> 提供了更强大和灵活的响应式系统，解决了 Vue2 中的部分限制。</p><ul><li><p>Proxy 对象： 使用 proxy 来代理对象的访问和修改操作，proxy 可以监听对象的所有操作，包括属性的读取、写入和删除。</p></li><li><p>响应式 API： 如 ref、reactive。用于创建响应式对象和单个响应式值。</p></li><li><p>依赖收集： 当响应式对象的属性被访问时，Vue 会记录依赖于该数据副作用（组件渲染等）。</p></li><li><p>触发更新： 当响应式对象的属性被修改时，Vue 会通知所有依赖于该属性的副作用重新执行</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Object.defineProperty 和 Proxy 的区别</p><ul><li><p>Object.defineProperty 实现的响应式无法检测对象属性的添加和删除。需要使用 Vue 重写的 Vue.set 和 Vue.delete 手动添加或删除以保持响应式</p><p>【Proxy 可以直接监听对象属性的添加或删除】</p></li><li><p>Object.defineProperty 无法监听数组索引和长度变化（如直接设置数组的长度来截断数组）</p><p>【Proxy 可以监听数组的索引和长度的变化】</p></li><li><p>Object.defineProperty 的实现方式 响应式系统在处理大量数据时可能会有性能问题</p><p>【Proxy 能更高效的跟踪依赖关系，减少不必要的更新，提高性能】</p></li></ul></div><h2 id="vue3-响应原理的细节-代码对应" tabindex="-1">Vue3 响应原理的细节(代码对应) <a class="header-anchor" href="#vue3-响应原理的细节-代码对应" aria-label="Permalink to &quot;Vue3 响应原理的细节(代码对应)&quot;">​</a></h2><ul><li><ol><li>问：proxy 只会代理对象的第一层，那么 vue3 是怎么处理这个问题的呢？</li></ol></li></ul><p>答：判断当前 <code>Reflect.get</code>的返回值是否为 <code>Object</code>, 如果是则在通过 reactive 做代理，这样就实现了深度观测。</p><ul><li><ol start="2"><li>问：检测数组的时候可能触发多次 get/set, 那么如何防止触发多次呢？</li></ol></li></ul><p>答：可以判断 key 是否为当前被代理对象 target 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 trigger。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, receiver)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 进行依赖收集</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果结果是一个对象，递归地将其转换为响应式对象</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> oldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, receiver)</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, value, receiver)</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果值发生变化，触发依赖更新</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.user.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Alice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="vue3-与-vue2-的区别" tabindex="-1">vue3 与 vue2 的区别 <a class="header-anchor" href="#vue3-与-vue2-的区别" aria-label="Permalink to &quot;vue3 与 vue2 的区别&quot;">​</a></h2><ul><li><p>vue3 使用 ts 进行了重写</p></li><li><p>支持 <code>Composition API</code>: 基于函数的 API，可以更加灵活的组织代码逻辑。（vue2 是<code>Options API</code>）</p></li><li><p>编译优化：vue3 标记和提升所有静态根节点，diff 的时候只需要对比动态节点内容（vue2 通过标记静态根节点优化 diff）</p></li><li><p>打包体积优化：移除了一些不常用的 api（inline-template、filter）</p></li><li><p>生命周期：使用 setup 代替了之前的<code>beforeCreate</code> 和 <code>created</code></p></li><li><p>vue3 的 template 支持多个根标签</p></li><li><p>vuex 状态管理：创建实例的方式改变，vue2 为 new Store， vue3 为 createStore</p></li><li><p>Route 获取页面实例与路由信息：vue2 通过 this 获取， vue3 通过 api 获取 getCuurentInstance/userRoute 和 userRouter 方法获取当前组件实例</p></li><li><p>父子组件传值：vue3 在向父子组件传回数据时，如使用的自定义名称，如 backData，则需要再 emits 中定义</p></li></ul><h2 id="在-vue2-x-中如何检测数组的变化" tabindex="-1">在 Vue2.x 中如何检测数组的变化？ <a class="header-anchor" href="#在-vue2-x-中如何检测数组的变化" aria-label="Permalink to &quot;在 Vue2.x 中如何检测数组的变化？&quot;">​</a></h2><p>使用了函数劫持的方式，重写了数组的方法，vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原形方法，这样当调用数据 api 时，可以通知依赖更新。如果数组中包含引用类型，会对数组中的引用类型再次地递归遍历进行监控。这样就实现了检测数组变化。</p><h2 id="vue-diff-算法" tabindex="-1">vue diff 算法？ <a class="header-anchor" href="#vue-diff-算法" aria-label="Permalink to &quot;vue diff 算法？&quot;">​</a></h2><h3 id="vue2-渲染器的-diff-算法" tabindex="-1">vue2 渲染器的 diff 算法？ <a class="header-anchor" href="#vue2-渲染器的-diff-算法" aria-label="Permalink to &quot;vue2 渲染器的 diff 算法？&quot;">​</a></h3><p>Vue2 的核心 Diff 算法采用了双端比较的算法，同时从新旧 children 的两端开始比较，借助 key 值找到可复用的节点，在进行相关操作。相比 react 的 diff 算法，同样情况可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><h3 id="vue3-的-diff-算法" tabindex="-1">Vue3 的 diff 算法？ <a class="header-anchor" href="#vue3-的-diff-算法" aria-label="Permalink to &quot;Vue3 的 diff 算法？&quot;">​</a></h3><p>Vue3.x 借鉴了 ivi 算法 和 inferno 算法， 在创建 VNode 时就确定其类型，以及在 mount/patch 的过程中采用 位运算来判断一个 VNode 的类型，在这个基础之上在配合核心的 Diff 算法，使得性能上较 Vue2.x 有了提升。</p><div class="tip custom-block"><p class="custom-block-title">diff 算法</p><ul><li>同级比较，在比较子节点</li><li>先判断一方有子节点，一方没有子节点的情况(如果新的 children 为空，则删除旧的 children)</li><li>比较都有子节点的情况(核心 diff)</li><li>递归比较子节点</li></ul><p>正常 Diff 两个输的时间复杂度是 <code>0(n^3)</code>, 但实际情况下我们很少会进行跨层级的移动 DOM， 所以 Vue 将 Diff 进行优化， 从 0(n^3) -&gt; 0(n), 只有当新旧 children 都为多个子节点时才需要用核心的 diff 算法。进行同层级比较。</p></div><h2 id="v-model-双向绑定的原理是什么" tabindex="-1">v-model 双向绑定的原理是什么？ <a class="header-anchor" href="#v-model-双向绑定的原理是什么" aria-label="Permalink to &quot;v-model 双向绑定的原理是什么？&quot;">​</a></h2><p>v-model 本质上就是一个语法糖，可以看成是 value + input 方法的语法糖。可以通过 model 属性的 prop 和 event 属性来进行自定义。原生的 v-model，会根据标签的不同生成不同的时间和属性。</p><h2 id="vue3-x-自定义组件实现数据双向绑定-要求能够多个-v-model-如-title、content" tabindex="-1">Vue3.x 自定义组件实现数据双向绑定，要求能够多个 v-model，如 title、content <a class="header-anchor" href="#vue3-x-自定义组件实现数据双向绑定-要求能够多个-v-model-如-title、content" aria-label="Permalink to &quot;Vue3.x 自定义组件实现数据双向绑定，要求能够多个 v-model，如 title、content&quot;">​</a></h2><p>3.4 版本前：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-DVtlI" id="tab-sSXL0KD" checked><label data-title="MoreComp.vue" for="tab-sSXL0KD">MoreComp.vue</label><input type="radio" name="group-DVtlI" id="tab-RwbsP4h"><label data-title="FatherComponent.vue" for="tab-RwbsP4h">FatherComponent.vue</label></div><div class="blocks"><div class="language-vue vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$emit(&#39;update:a&#39;, $event.target.value)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$emit(&#39;update:b&#39;, $event.target.value)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MoreComp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./MoreComp.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MoreComp</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model:a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model:b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><p>3.4 版本后： <code>defineModel</code></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GXqLs" id="tab-Zq6zGgQ" checked><label data-title="MoreComp.vue" for="tab-Zq6zGgQ">MoreComp.vue</label><input type="radio" name="group-GXqLs" id="tab-WJv6qvL"><label data-title="FatherComponent.vue" for="tab-WJv6qvL">FatherComponent.vue</label></div><div class="blocks"><div class="language-vue vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MoreComp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./MoreComp.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MoreComp</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model:a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model:b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><h2 id="vue-项目中有哪些常见优化手段" tabindex="-1">vue 项目中有哪些常见优化手段？ <a class="header-anchor" href="#vue-项目中有哪些常见优化手段" aria-label="Permalink to &quot;vue 项目中有哪些常见优化手段？&quot;">​</a></h2><ul><li>路由懒加载</li><li>图片懒加载</li><li>Suspence（vue2 没有，需要借助插件实现；vue3 中）</li><li>打包优化</li><li>网络打包优化 <ul><li>CDN</li><li>http2</li><li>图片格式化</li><li>gzip</li><li>请求合并</li></ul></li><li>key： 合理使用 key</li><li>computed</li><li>保持对象地址稳定</li><li>尽量避免大数据放在 data 中</li><li>keep-alive</li><li>延时加载</li><li>v-model.lazy</li><li>vue2 冻结对象</li></ul>`,42)]))}const u=i(e,[["render",p]]);export{c as __pageData,u as default};
