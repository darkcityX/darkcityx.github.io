import{_ as t,c as l,a0 as e,o as r}from"./chunks/framework.CSihnngI.js";const d=JSON.parse('{"title":"搭建工程","description":"","frontmatter":{},"headers":[],"relativePath":"subject/vue/vue3/projectSetup.md","filePath":"subject/vue/vue3/projectSetup.md","lastUpdated":1755052374000}'),o={name:"subject/vue/vue3/projectSetup.md"};function s(n,i,a,u,p,c){return r(),l("div",null,i[0]||(i[0]=[e('<h1 id="搭建工程" tabindex="-1">搭建工程 <a class="header-anchor" href="#搭建工程" aria-label="Permalink to &quot;搭建工程&quot;">​</a></h1><h2 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-label="Permalink to &quot;包管理器&quot;">​</a></h2><p>搭建工程首先需要一个包管理器</p><ul><li>npm</li><li>pnpm</li><li>yarn</li><li>bun</li></ul><p>搭建工程文档：<a href="https://vuejs.org/guide/quick-start.html" target="_blank" rel="noreferrer">https://vuejs.org/guide/quick-start.html</a></p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>项目结构如下：</p><ul><li><strong>.vscode</strong>：这个文件夹通常包含了 Visual Studio Code 的配置文件，用来设置代码格式化、主题样式等。</li><li><strong>node_modules</strong>：这个文件夹内包含项目所需的所有 node 包。当运行 npm install 或 yarn 时，所有在 package.json 中列出的依赖都会被安装到这个文件夹下。</li><li><strong>public</strong>：用来存放静态资源的文件夹，这部分静态资源是不会经过构建工具处理的。例如 favicon 图标文件。</li><li><strong>src</strong>：源码文件夹，我们的开发工作主要就是在这个目录下面。通常包括 Vue 组件、JavaScript 文件、样式文件等。 <ul><li>assets：这个同样是静态资源目录，放在该目录下的静态资源在打包的时候会被构建工具处理。</li><li>components：组件目录，存放各种功能组件</li><li>App.vue：根组件</li><li>main.js：入口 JS 文件</li></ul></li><li><strong>.eslintrc.cjs</strong>：ESLint 的配置文件，用于检查代码错误和风格问题，cjs 是 CommonJS 的配置文件格式。</li><li><strong>.gitignore</strong>：Git 的配置文件，用于设置不需要加入版本控制的文件或文件夹。</li><li><strong>.prettierrc.json</strong>：Prettier 的配置文件，Prettier 是一个代码格式化工具。</li><li><strong>index.html</strong>：项目的入口 HTML 文件，Vite 将利用它来处理应用的加载。</li><li><strong>jsconfig.json</strong>：JavaScript 的配置文件，用于告诉 VS Code 如何处理 JavaScript 代码，例如设置路径别名。</li><li><strong>package-lock.json</strong>：锁定安装时的包的版本，确保其他人在 npm install 时，大家的依赖能保持一致。</li><li><strong>package.json</strong>：定义了项目所需的各种模块以及项目的配置信息（例如项目的名称、版本、许可证等）。</li><li><strong>README.md</strong>：项目的说明文件，通常包含项目介绍、使用方法、贡献指南等。</li><li><strong>vite.config.js</strong>：Vite 的配置文件，用于定制 Vite 的构建和开发服务等。</li></ul><h2 id="vscode插件" tabindex="-1">VSCode插件 <a class="header-anchor" href="#vscode插件" aria-label="Permalink to &quot;VSCode插件&quot;">​</a></h2><ul><li><strong>Vue VSCode Snippets</strong>：可以快速生成 Vue 代码的模板</li><li><strong>Vue-Official</strong><ul><li>在 Vue2 时间，大家接触更多的是 Vetur，该插件主要是对 Vue 单文件组件提供高亮，语法支持和检测功能。</li><li>后面随着 Vue3 版本的发布，Vue 官方团队推荐使用 Volar 插件，该插件覆盖了 Vetur 所有的功能，并且支持 Vue3 版本，还支持 TS 的语法检测。</li><li>但是现在，无论是 Vetur、Volar、TypeScript Vue Plugin 已经成为历史了，目前官方推出了 Vue-Official，这个最新的插件将前面插件的所有功能都涵盖了。</li></ul></li></ul><h2 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h2><p>官网：<a href="https://vitejs.dev/" target="_blank" rel="noreferrer">https://vitejs.dev/</a></p><p>官方推荐的构建工具，显著提升开发体验。</p><p>Vite 之所以能够提升开发体验，是因为它的工作原理和 Webpack 完全不同。Vite 压根儿就不打包，而是通过请求本地服务器的方式来获取文件。</p><p>常用的配置如下：</p><ol><li><strong>base</strong>：用于设置项目的基础路径。这对于部署到非根目录的项目特别有用。</li><li><strong>server</strong>：配置开发服务器的选项，例如 <ul><li>端口（port）</li><li>自动打开浏览器（open）</li><li>跨源资源共享（cors）</li><li>代理配置（proxy）</li><li>.....</li></ul></li><li><strong>build</strong>：包含构建过程的配置，例如 <ul><li>输出目录（outDir）</li><li>生产环境源码地图（sourcemap）</li><li>压缩（minify）</li><li>分块策略（rollupOptions）</li><li>.....</li></ul></li><li><strong>css</strong>：用于配置 CSS 相关选项，如预处理器配置、模块化支持等。</li><li><strong>esbuild</strong>：可以自定义 ESBuild 的配置，例如指定 JSX 的工厂函数和片段。</li><li><strong>optimizeDeps</strong>：用于预构建依赖管理，可以指定需要预构建的依赖，以加速冷启动时间。</li><li><strong>define</strong>：允许你定义在源码中全局可用的常量替换。</li><li><strong>publicDir</strong>：设置公共静态资源目录，默认为 public。</li></ol><hr><p>-EOF-</p>',18)]))}const h=t(o,[["render",s]]);export{d as __pageData,h as default};
