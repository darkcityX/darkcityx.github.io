import{_ as l,a as i,b as e,c as r,d as o,e as d,f as p,g as s,h as u,i as t}from"./chunks/09data.D5bRHQyb.js";import{_ as c,c as h,a0 as m,o as n}from"./chunks/framework.CSihnngI.js";const S=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"majorTopic/dataAndAlgorithm/02_dataStructure.md","filePath":"majorTopic/dataAndAlgorithm/02_dataStructure.md","lastUpdated":1713316186000}'),_={name:"majorTopic/dataAndAlgorithm/02_dataStructure.md"};function b(f,a,q,g,k,P){return n(),h("div",null,a[0]||(a[0]=[m('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="数据-data" tabindex="-1">数据 data <a class="header-anchor" href="#数据-data" aria-label="Permalink to &quot;数据 data&quot;">​</a></h2><p>是信息的载体，是描述客观事物的数、字符、以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。</p><h2 id="数据元素-data-element" tabindex="-1">数据元素 data element <a class="header-anchor" href="#数据元素-data-element" aria-label="Permalink to &quot;数据元素 data element&quot;">​</a></h2><p>是数据的基本单位，也称记录。在计算机程序中作为一个整体进行考虑和处理。</p><h2 id="数据项-data-item" tabindex="-1">数据项 data item <a class="header-anchor" href="#数据项-data-item" aria-label="Permalink to &quot;数据项 data item&quot;">​</a></h2><p>一个数据元素可由若干个数据项组成，它是一个数据整体中相对独立的单位。</p><h2 id="数据结构-data-structure" tabindex="-1">数据结构 data structure <a class="header-anchor" href="#数据结构-data-structure" aria-label="Permalink to &quot;数据结构 data structure&quot;">​</a></h2><p>由某一数据元素的集合和该集合中数据元素之间的关系组成。</p><p>$$ Data_Structure={D,R} $$</p><p><img src="'+l+'" alt="数据结构"></p><ul><li>逻辑结构：数据元素之间的相关关系称为逻辑结构。</li><li>存储结构(物理结构)：数据逻辑结构的物理存储方式。</li><li>数据运算：施加在该数据上的操作。</li></ul><p><img src="'+i+'" alt="数据结构"></p><p><img src="'+e+'" alt="数据结构"></p><p><img src="'+r+'" alt="数据结构"></p><p>如何设计软件<code>小组件</code>？</p><p>逻辑层面：</p><ul><li>首先理清楚数据本身是什么？ <ul><li>包含哪些元素？</li><li>元素之间的关系？结构！</li></ul></li><li>提供哪些功能？</li></ul><p>实现层面：</p><ul><li>数据如何存储？</li><li>功能如何实现？</li></ul><h2 id="数据结构-逻辑结构" tabindex="-1">数据结构-逻辑结构 <a class="header-anchor" href="#数据结构-逻辑结构" aria-label="Permalink to &quot;数据结构-逻辑结构&quot;">​</a></h2><ul><li>集合结构：元素除了同属于一个集合外，他们之间没有其他关系</li><li>现行结构：元素之间是一对一的关系。</li><li>树形结构：元素之间是一对多的层次关系</li><li>图形结构：元素之间是多对多的关系。</li></ul><h2 id="数据结构-物理结构-存储结构" tabindex="-1">数据结构-物理结构(存储结构) <a class="header-anchor" href="#数据结构-物理结构-存储结构" aria-label="Permalink to &quot;数据结构-物理结构(存储结构)&quot;">​</a></h2><ul><li>顺序存储方法：数据元素存放在地址连续的存储单元中，其数据间的逻辑关系和物理关系是一致的。</li></ul><p><img src="'+o+'" alt="数据结构"></p><ul><li>链接存储方法：逻辑上相邻的元素在物理位置不一定相邻，元素之间的逻辑关系由附件指针指示</li></ul><p><img src="'+d+'" alt="数据结构"></p><ul><li>索引存储方法：存储元素信息的同时，还建立附加的索引表。</li></ul><p><img src="'+p+'" alt="数据结构"></p><ul><li>散列存储方法：根据结点的关键码通过一个函数计算直接得到该节点的存储地址。 11 个元素的关键码分别为 18,27,1,20,22,6,10,13,41,15,25 $$ f(key)=key%11 $$</li></ul><p><img src="'+s+'" alt="数据结构"></p><h2 id="数据结构-数据运算" tabindex="-1">数据结构-数据运算 <a class="header-anchor" href="#数据结构-数据运算" aria-label="Permalink to &quot;数据结构-数据运算&quot;">​</a></h2><ul><li>对于一批数据，数据的运算（操作）是定义在数据的逻辑结构之上，而运算（操作）的具体实现就依赖于数据的存储结构。</li></ul><p><img src="'+u+'" alt="数据结构"></p><ul><li><p>同一逻辑结构可以对应多种存储结构</p></li><li><p>同样的运算，在不同的存储结构中，其实过程是不同的</p></li></ul><p><img src="'+t+'" alt="数据结构"></p><h2 id="数据结构的抽象" tabindex="-1">数据结构的抽象 <a class="header-anchor" href="#数据结构的抽象" aria-label="Permalink to &quot;数据结构的抽象&quot;">​</a></h2><h3 id="抽象形式" tabindex="-1">抽象形式 <a class="header-anchor" href="#抽象形式" aria-label="Permalink to &quot;抽象形式&quot;">​</a></h3><p>数据类型：一种类型，一组值的集合以及定义于这个值集合上的一组操作的总称。</p><p>分类：</p><ul><li>原子类型： 不可以在分解的基本类型</li><li>结构类型： 由若干个类型组合而成，是可以再分解的</li></ul><h3 id="抽象数据类型" tabindex="-1">抽象数据类型 <a class="header-anchor" href="#抽象数据类型" aria-label="Permalink to &quot;抽象数据类型&quot;">​</a></h3><p>概念：由基本的数据类型组成，并包括一组相关的服务(或操作)</p><p>从求解问题的数学模型中抽象出来的数据逻辑结构和运算（抽象运算），而不考虑计算机的具体实现。</p><p>特征：使用与实现分离，实行封装和信息隐蔽。</p><p>定义：由 <code>元素</code> 、 <code>关系</code> 、 <code>操作</code> 三种要素来进行定义</p><p><img src="'+t+'" alt="数据结构"></p>',47)]))}const A=c(_,[["render",b]]);export{S as __pageData,A as default};
